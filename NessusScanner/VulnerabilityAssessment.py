#!/usr/bin/python

__author__ = 'nirv'

from Common.AppConfigMgr import ConfigMgr
from Common.Logger import Logger
from Common.Exceptions import RemediationException
from Common.Exceptions import GenericException
import xml.etree.ElementTree as ET
import urllib
import urllib2
import time


class Scanner:

    def __init__(self):
        self.__cfg = ConfigMgr()
        protocol = self.__cfg.getParameter("Nessus", "Protocol")
        ip_address = self.__cfg.getParameter("Nessus", "IPAddress")
        port = self.__cfg.getParameter("Nessus", "Port")
        self.__url = "{}://{}:{}".format(protocol,ip_address,port)
        username = self.__cfg.getParameter("Nessus", "Username")
        password = self.__cfg.getParameter("Nessus", "Pssword")
        query_args = { 'login':username, 'password':password, 'seq': '1'}
        post_data = urllib.urlencode(query_args)
        try:
            response = urllib2.urlopen("{}/Login".format(self.__url),post_data)
            set_cookie = response.info().getheader('Set-Cookie')
            if set_cookie is not None:
                self.__session_id = set_cookie.split(";")[0]
                Logger.log("info", "Connected succesfully to vulnerability scanner")
            else:
                raise GenericException("Could not connect to the vulnerability scanner due to incorrect credentials")
        finally:
            self.__logout()

    def run_scan(self):
        target = self.__get_ip_address()
        policy_id = self.__cfg.getParameter("Nessus", "ScanPolicyId")
        scan_name = "Target:{} Time:{}".format(target, self.__get_time())
        query_args = { 'target':target, 'policy_id':policy_id, "scan_name":scan_name, "seq":"1"}
        response = self.__send_request("/scan/new", query_args)
        response_xml = ET.fromstring(response)
        scan_uuid = response_xml.find("contents").find("scan").find("uuid").text
        scan_status = response_xml.find("contents").find("scan").find("status").text
        print "Scan status:"
        while self.__is_scan_id_in_list(scan_uuid, scan_status):
            print "{}-Running".format(self.__get_time())
            if self.__is_contain_high_severity_risks(scan_uuid):
                raise RemediationException("The VA scanner found findings that do not comply with organizational policy.  Review scanner's report named {}".format(scan_name))
            time.sleep(10)
        Logger.log("info","The VA scan completed successfully")

    def __is_scan_id_in_list(self, scan_id, status):
        query_args = {"seq":"1"}
        response = self.__send_request("/scan/list", query_args)
        response_xml = ET.fromstring(response)
        for scan in response_xml.find("contents").find("scans").find("scanList"):
            if scan.find("uuid") is not None and scan.find("status") is not None:
                if scan_id == scan.find("uuid").text and status == scan.find("status").text :
                    return True
        return False

    def __is_contain_high_severity_risks(self, scan_id):
        query_args = { "report":scan_id, "seq":"1"}
        response = self.__send_request("/report2/vulnerabilities", query_args)
        response_xml = ET.fromstring(response)
        risks_found = False
        if response_xml.find("contents").find("vulnList").findall("vulnerability") is not None:
            for finding in response_xml.find("contents").find("vulnList").findall("vulnerability"):
                if int(finding.find("severity").text) > 1: # 0 - Info, 1 - Low, 2 - Medium, 3 - High
                    risks_found = True
                    Logger.log("warning","Security finding: {}".format(finding.find("plugin_name").text))
        return risks_found

    def __send_request(self, uri, query_args = None):
        if query_args is not None:
            post_data = urllib.urlencode(query_args)
        try:
            request = urllib2.Request("{}{}".format(self.__url,uri), post_data)
            request.add_header("Cookie", self.__session_id)
            response = urllib2.urlopen(request).read()
            return response
        except Exception as ex:
            Logger.log("error","Error while processing the request: {}".format(ex.message))

    def __get_time(self):
        import datetime
        timestamp = time.time()
        return datetime.datetime.fromtimestamp(timestamp).strftime('%d-%m-%Y %H:%M')

    def __get_ip_address(self):
        import socket
        return socket.gethostbyname(socket.gethostname())

    def __logout(self):
        query_args = {"seq":"1"}
        self.__send_request("/logout", query_args)

    def __del__(self):
        self.__logout()